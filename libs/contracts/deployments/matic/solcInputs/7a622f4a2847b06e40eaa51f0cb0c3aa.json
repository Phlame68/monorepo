{
  "language": "Solidity",
  "sources": {
    "contracts/utils/BondPurchaseChecker.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma abicoder v2;\npragma solidity ^0.8.6;\n\ninterface ICustomBill {\n    struct Bill {\n        uint256 payout;\n        uint256 payoutClaimed;\n        uint256 vesting;\n        uint256 vestingTerm;\n        uint256 vestingStartTimestamp;\n        uint256 lastClaimTimestamp;\n        uint256 truePricePaid;\n    }\n    \n    function getBillIds(address user) external view returns (uint[] memory);\n    function getBillInfo(uint256 billId) external view returns (Bill memory);\n}\n\ncontract BondPurchaseChecker {\n    struct Bill {\n        uint256 payout;\n        uint256 payoutClaimed;\n        uint256 vesting;\n        uint256 vestingTerm;\n        uint256 vestingStartTimestamp;\n        uint256 lastClaimTimestamp;\n        uint256 truePricePaid;\n    }\n\n    ICustomBill bond;\n\n    constructor(address _bondContractAddress) {\n        bond = ICustomBill(_bondContractAddress);\n    }\n\n    function largestTruePricePaidOf(address _user) public view returns (uint256) { \n        require(_user != address(0), \"!user\");\n\n        uint[] memory billIds = bond.getBillIds(_user);\n        uint256 largestTruePricePaid = 0;\n\n        for (uint i = 0; i < billIds.length; i++) {\n            uint256 currentTruePricePaid = bond.getBillInfo(billIds[i]).truePricePaid;\n            largestTruePricePaid = currentTruePricePaid > largestTruePricePaid ? currentTruePricePaid : largestTruePricePaid;\n        }\n\n        return largestTruePricePaid;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}